<?php
/************************************************************************
 * This file is part of 4373Alpha-Server Project.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 * ************************************************************************
 * Created at 24.03.15, 14:31 by 4nn3ck
 * ************************************************************************
 */

namespace Anneck\Game\Item;

use Anneck\Game\ActionInterface;
use Anneck\Game\Exception\GameException;
use Anneck\Game\Exception\GameFeatureMissingException;
use Anneck\Game\Features\ItemRegisterFeature;
use Anneck\Game\GameInterface;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * The ActionManager uses the register of the game to determine
 *
 * @todo    Write PHPDoc for this class!
 *
 * @since   0.0.1-dev
 *
 * @author  AndrÃ© Anneck <andreanneck73@gmail.com>
 */
class ActionManager extends ArrayCollection
{
    const ACTION_KEY = 'Action';
    const MAXIMUM_USES_KEY = 'MaximumUses';
    /**
     * @var GameInterface
     */
    private $game;

    /**
     * @param GameInterface $gameToUse
     */
    public function __construct(GameInterface $gameToUse)
    {
        $this->game = $gameToUse;
    }
    /**
     * @param ActionInterface $action
     * @param string          $maximumUses
     *
     * @return bool
     * @internal param mixed $value
     *
     */
    public function addAction(ActionInterface $action, $maximumUses = '*')
    {
        $actionUseTuple = [self::ACTION_KEY => $action, self::MAXIMUM_USES_KEY => $maximumUses];

        return parent::add($actionUseTuple); // TODO: Change the autogenerated stub
    }

    /**
     * Dont use this method, use addAction instead!
     *
     * @param mixed $value
     *
     * @return bool
     * @throws GameException
     */
    public function add($value)
    {
        if(!$value instanceof ActionInterface) {
            throw new GameException('ActionManager add() requires ActionInterface!');
        }
        // This will insert the default maximumUses for the specified action!
        return $this->addAction($value);
    }

    /**
     * @return ArrayCollection
     */
    public function getUseableActions()
    {
        $useableActions = new ArrayCollection();

        if(!$this->game instanceof ItemRegisterFeature) {
            throw new GameFeatureMissingException('ItemRegisterFeature!');
        }

        if($this->game->hasItem($this)) {
            // we are in the register ...
            $this->game->getItemData($this);
        }

        return $useableActions;
    }

    public function getActionList()
    {
        $actionList = new ArrayCollection();
        foreach($this->getIterator() as $actionUseTuples) {
            $action = $actionUseTuples[self::ACTION_KEY];
            $actionList->add($action);
        }
        return $actionList;
    }

}